import Link from "next/link";
import dynamic from "next/dynamic";
import facultyData from "@/assets/faculty.json";

import { type FormDataInterface } from "@/interfaces/FormDataInterface";

import { NextPage } from "next";
import { useEffect, useState } from "react";
// import { NextPage, NextPageContext } from "next";

import { toast } from "react-hot-toast";
import { Button, Text, Loading } from "@nextui-org/react";
import { AutoComplete, Checkbox, Form, Input, Select, Skeleton } from "antd";

import { api } from "@/utils/api";
// import { prisma } from "@/server/db";
// import { getToken } from "next-auth/jwt";
// import { useSession } from "next-auth/react";
import { useLocalStorage } from "usehooks-ts";
import { useReCaptcha } from "next-recaptcha-v3";

const TextArea = dynamic(() => import("antd/es/input/TextArea"), {
  ssr: false,
});

const UploadComponent = dynamic(() => import("@/components/UploadComponent"), {
  ssr: false,
});

// const Turnstile = dynamic(() => import("react-turnstile"), {
//   ssr: false,
// });

// export async function getServerSideProps(context: NextPageContext) {
//   let token = await getToken({
//     req: context.req as any,
//     secret: process.env.NEXTAUTH_SECRET!,
//   });

//   const dataDB = await prisma.request.findUnique({
//     where: {
//       google_id: token?.sub,
//     },
//   });

//   let isRegisted = false;

//   if (
//     dataDB?.first_name_en ||
//     dataDB?.last_name_en ||
//     dataDB?.first_name_th ||
//     dataDB?.last_name_th ||
//     dataDB?.faculty ||
//     dataDB?.major
//   ) {
//     isRegisted = true;
//   }

//   return {
//     props: {
//       isRegisted,
//       isApproved: dataDB?.is_approved || false,
//     },
//   };
// }

interface Props {
  isRegisted?: boolean;
  isApproved?: boolean;
}

const Join: NextPage<Props> = () => {
  const [token, setToken] = useState<string | null>(null);
  const [Faculty, setFaculty] = useState<string | null>(null);
  const [FormLocalStorage, setFormLocalStorage] =
    useLocalStorage<FormDataInterface | null>("formData", null);
  const [form] = Form.useForm();
  const [hasImage, setHasImage] = useState(false);
  const [CT, setCT] = useState(1);
  const { executeRecaptcha } = useReCaptcha();
  const [AceptPrivacy, setAceptPrivacy] = useState(false);

  useEffect(() => {
    if (FormLocalStorage !== null) {
      form.setFieldsValue(FormLocalStorage);
    }
  }, []);

  const validateMessages = {
    required: "${label} is required!",
    types: {
      email: "${label} ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö email ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!",
      number: "${label} is not a validate number!",
    },
  };

  const joinApi = api.join.add.useMutation();
  const checkApproveApi = api.join.checkApprove.useQuery(undefined);

  const onFinish = async () => {
    if (!hasImage) return toast.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û");

    const token = await executeRecaptcha("form_submit");

    if (token === null)
      return toast.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏µ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ä‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà");

    if (!AceptPrivacy) return toast.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß");

    let key = toast.loading("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å");
    await joinApi.mutate(
      {
        data: form.getFieldsValue(),
        token,
      },
      {
        onSuccess: () => {
          toast.success("‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", {
            id: key,
          });
          form.resetFields();
          setFormLocalStorage(null);
          window.location.reload();
        },
        onError: ({ message }) => {
          toast.error(message, {
            id: key,
          });
          setCT((pre) => pre + 1);
        },
      }
    );
  };

  const ThaiValidator = (_: any, value: any) => {
    const thaiNameRegex = /^[‡∏Å-‡πô\s]+$/;
    if (!thaiNameRegex.test(value)) {
      return Promise.reject("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô");
    } else {
      return Promise.resolve();
    }
  };

  const EnglishValidator = (_: any, value: any) => {
    const englishNameRegex = /^[a-zA-Z\s]+$/;
    if (!englishNameRegex.test(value)) {
      return Promise.reject("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô");
    } else {
      return Promise.resolve();
    }
  };

  const KuEmailValidator = (_: any, value: any) => {
    const kuEmailRegex = /^[a-z0-9._%+-]+@ku\.th$/;
    if (!kuEmailRegex.test(value)) {
      return Promise.reject(
        "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πå @ku.th ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)"
      );
    } else {
      return Promise.resolve();
    }
  };

  const { isRegisted, isApproved, message } = checkApproveApi.data || {
    isRegisted: false,
    isApproved: false,
    message: {
      line: "" as string | null,
      discord: "" as string | null,
    },
  };

  return (
    <div className="mx-auto w-full max-w-[73rem] flex-col gap-10 p-5 md:flex-row md:p-10">
      {/* <div className="text-3xl text-center">
        {`cout << "‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏∞‡∏ö‡∏ö" << endl;`}
        </div> */}
      <div className="flex w-full flex-col gap-5">
        <Text className="prompt" size={"$3xl"}>
          ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏ä‡∏°‡∏£‡∏°
        </Text>
        {!checkApproveApi.isLoading ? (
          <>
            {isRegisted ? (
              <>
                {isApproved ? (
                  <div className="flex flex-col">
                    <Text className="prompt" size={"$xl"}>
                      Congratulations! üéâ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏ä‡∏°‡∏£‡∏°‡πÅ‡∏•‡πâ‡∏ß
                    </Text>
                    <Text className="prompt" size={"$xl"}>
                      Line :{" "}
                      <a
                        href={message.line ? message.line : ""}
                        target="_blank"
                      >
                        {message.line ? message.line : ""}
                      </a>
                    </Text>
                    <Text className="prompt" size={"$xl"}>
                      Discord :{" "}
                      <a
                        href={message.discord ? message.discord : ""}
                        target="_blank"
                      >
                        {message.discord ? message.discord : ""}
                      </a>
                    </Text>
                  </div>
                ) : (
                  <Text className="prompt" size={"$xl"}>
                    ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏ä‡∏°‡∏£‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏ó‡∏≤‡∏á‡∏ä‡∏°‡∏£‡∏° ‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏≤‡∏á
                    Email üôè
                  </Text>
                )}
              </>
            ) : (
              <Form
                form={form}
                layout="vertical"
                initialValues={{ remember: true }}
                onFinish={onFinish}
                validateMessages={validateMessages}
                onValuesChange={(changedValues, allValues) => {
                  setFormLocalStorage(allValues);
                }}
              >
                <div className="flex w-full flex-col md:flex-row md:gap-5">
                  <Form.Item
                    className="w-full"
                    label="‡∏ä‡∏∑‡πà‡∏≠ (‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢)"
                    name="first_name_th"
                    rules={[
                      { required: true },
                      {
                        validator: ThaiValidator,
                      },
                    ]}
                  >
                    <Input
                      size="large"
                      lang="th"
                      placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á (‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢)"
                    />
                  </Form.Item>
                  <Form.Item
                    className="w-full"
                    label="‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• (‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢)"
                    name="last_name_th"
                    rules={[{ required: true }, { validator: ThaiValidator }]}
                  >
                    <Input
                      lang="th"
                      size="large"
                      placeholder="‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• (‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢)"
                    />
                  </Form.Item>
                </div>
                <div className="flex w-full flex-col md:flex-row md:gap-5">
                  <Form.Item
                    className="w-full"
                    label="‡∏ä‡∏∑‡πà‡∏≠ (‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©)"
                    name="first_name_en"
                    rules={[
                      { required: true },
                      { validator: EnglishValidator },
                    ]}
                  >
                    <Input
                      lang="en"
                      size="large"
                      placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á (‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©)"
                    />
                  </Form.Item>
                  <Form.Item
                    className="w-full"
                    label="‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• (‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©)"
                    name="last_name_en"
                    rules={[
                      { required: true },
                      { validator: EnglishValidator },
                    ]}
                  >
                    <Input
                      lang="en"
                      size="large"
                      placeholder="‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• (‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©)"
                    />
                  </Form.Item>
                </div>
                <div className="flex w-full flex-col md:flex-row md:gap-5">
                  <Form.Item
                    className="w-full"
                    label="‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô"
                    name="nick_name"
                    rules={[{ required: true }, { validator: ThaiValidator }]}
                  >
                    <Input size="large" placeholder="‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô" />
                  </Form.Item>
                  <Form.Item
                    rules={[
                      { type: "email", required: true },
                      {
                        validator: KuEmailValidator,
                      },
                    ]}
                    className="w-full"
                    label="‡∏≠‡∏µ‡πÄ‡∏°‡∏•"
                    name="email"
                  >
                    <Input size="large" placeholder="example@ku.th" />
                  </Form.Item>
                </div>
                <div className="flex w-full flex-col md:flex-row md:gap-5">
                  <Form.Item
                    className="w-full"
                    label="‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ"
                    name="year"
                    rules={[{ required: true }]}
                  >
                    <Select size="large" placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ">
                      <Select.Option value={1}>‡∏õ‡∏µ 1</Select.Option>
                      <Select.Option value={2}>‡∏õ‡∏µ 2</Select.Option>
                      <Select.Option value={3}>‡∏õ‡∏µ 3</Select.Option>
                      <Select.Option value={4}>‡∏õ‡∏µ 4</Select.Option>
                      <Select.Option value={5}>‡∏õ‡∏µ 5</Select.Option>
                      <Select.Option value={6}>‡∏õ‡∏µ 6</Select.Option>
                    </Select>
                  </Form.Item>
                </div>
                <div className="flex w-full flex-col md:flex-row md:gap-5">
                  <Form.Item
                    className="w-full"
                    label="‡∏Ñ‡∏ì‡∏∞"
                    name="faculty"
                    rules={[{ required: true }]}
                  >
                    <AutoComplete
                      popupClassName="certain-category-search-dropdown"
                      placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ì‡∏∞"
                      size="large"
                      onSelect={(value) => setFaculty(value)}
                      onChange={(value) => {
                        if (value.length === 0) {
                          setFaculty(null);
                        }
                      }}
                      options={facultyData}
                      filterOption={(inputValue, option) =>
                        option!.value
                          .toUpperCase()
                          .indexOf(inputValue.toUpperCase()) !== -1
                      }
                    ></AutoComplete>
                  </Form.Item>
                </div>
                {Faculty || form.getFieldValue("major") ? (
                  <div>
                    <Form.Item
                      className="w-full"
                      label="‡∏™‡∏≤‡∏Ç‡∏≤"
                      name="major"
                      rules={[{ required: true }]}
                    >
                      <AutoComplete
                        popupClassName="certain-category-search-dropdown"
                        size="large"
                        placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤"
                        options={facultyData
                          .filter((option) => option.value === Faculty)[0]
                          ?.majors.map((item) => {
                            return { value: item };
                          })}
                        filterOption={(inputValue, option) =>
                          option?.value
                            .toUpperCase()
                            .indexOf(inputValue.toUpperCase()) !== -1
                        }
                      ></AutoComplete>
                    </Form.Item>
                  </div>
                ) : (
                  ""
                )}
                <Form.Item
                  className="w-full"
                  label="‡∏ó‡∏≥‡πÑ‡∏°‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏∂‡∏á‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏ä‡∏°‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤"
                  name="ojectives"
                  rules={[{ required: true }]}
                >
                  <TextArea name="" rows={4} />
                </Form.Item>
                <Form.Item
                  className="w-full"
                  label="Discord Tag"
                  name="discord_tag"
                  rules={[{ required: true }]}
                >
                  <Input lang="en" size="large" placeholder="Holilope#3811" />
                </Form.Item>
                <Form.Item
                  className="w-full"
                  label={
                    <div>
                      ‡∏£‡∏π‡∏õ‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏ö‡∏±‡∏ï‡∏£‡∏ô‡∏¥‡∏™‡∏¥‡∏ï ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡∏ö‡∏±‡∏ï‡∏£‡πÉ‡∏ô Application NisitKU ‡πÑ‡∏î‡πâ{" "}
                      <span className="font-bold text-red-500">
                        (‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ã‡πá‡∏ô‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢)
                      </span>
                    </div>
                  }
                  required
                >
                  <UploadComponent
                    action="/api/image_upload"
                    onReady={(v) => setHasImage(v)}
                  />
                  <div className="text-lg font-bold text-red-500">
                    *‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡∏ó‡πà‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏£‡∏Ç‡∏µ‡∏î‡∏Ü‡πà‡∏≤‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£ Master Card
                    ‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡∏≠‡∏≠‡∏Å
                  </div>
                </Form.Item>
                <Form.Item>
                  <Checkbox onChange={(v) => setAceptPrivacy(v.target.checked)}>
                    ‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö <Link href={"/privacy"}>‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß</Link>
                  </Checkbox>
                </Form.Item>
                <div className="flex flex-col items-center gap-3">
                  <Button
                    color={"gradient"}
                    shadow
                    style={{ width: "100%" }}
                    type="submit"
                  >
                    {joinApi.isLoading ? (
                      <Loading color="currentColor" size="sm" />
                    ) : (
                      "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å"
                    )}
                  </Button>
                </div>
              </Form>
            )}
          </>
        ) : (
          <Skeleton active paragraph={{ rows: 4 }} />
        )}
      </div>
    </div>
  );
};

export default Join;

// {/* <Turnstile
//                       sitekey={process.env.NEXT_PUBLIC_CT_SITE_KEY!}
//                       onVerify={(token) => setToken(token)}
//                       key={CT}
//                     /> */}
